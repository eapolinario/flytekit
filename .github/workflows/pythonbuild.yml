name: Build

# Schedule runs to run twice a day


on:
  push:
    branches:
      - master
  pull_request:
  schedule:
      - cron: '0 8 * * *' # This schedule runs at 08:00 UTC every day

env:
  FLYTE_SDK_LOGGING_LEVEL: 10 # debug

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  detect-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-python-versions.outputs.python-versions }}
    steps:
      - name: Set Python versions for scheduled run
        if: github.event_name == 'schedule'
        id: set-python-versions-schedule
        run: echo "name=python-versions::[\"3.8\",\"3.9\",\"3.10\",\"3.11\",\"3.12\"]" >> $GITHUB_ENV
      - name: Set Python versions for pull request
        if: github.event_name == 'pull_request'
        id: set-python-versions-pr
        run: echo "name=python-versions::[\"3.12\"]" >> $GITHUB_ENV
      - name: Combine results
        id: set-python-versions
        run: |
          echo "name=python-versions::${{ steps.set-python-versions-pr.outputs.python-versions }}" >> $GITHUB_ENV
          # if [[ -n "${{ steps.set-python-versions-schedule.outputs.python-versions }}" ]]; then
          #   echo "name=python-versions::${{ steps.set-python-versions-schedule.outputs.python-versions }}" >> $GITHUB_ENV
          # else
          #   echo "name=python-versions::${{ steps.set-python-versions-pr.outputs.python-versions }}" >> $GITHUB_ENV
          # fi

  build:
    needs:
      - detect-python-versions
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        # python-version: ${{ fromJSON(needs.detect-python-versions.outputs.python-versions) }}
        python-version: ${{ needs.detect-python-versions.outputs.python-versions }}
    steps:
      - run: |
          echo ${{ matrix.python-version }}
      # - uses: insightsengineering/disk-space-reclaimer@v1
      # - uses: actions/checkout@v4
      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}
      # - name: Cache pip
      #   uses: actions/cache@v3
      #   with:
      #     # This path is specific to Ubuntu
      #     path: ~/.cache/pip
      #     # Look to see if there is a cache hit for the corresponding requirements files
      #     key: ${{ format('{0}-pip-{1}', runner.os, hashFiles('dev-requirements.in', 'requirements.in')) }}
      # - name: Install dependencies
      #   run: |
      #     make setup
      #     pip uninstall -y pandas
      #     pip freeze
      # - name: Test with coverage
      #   run: |
      #     make unit_test_codecov
      # - name: Codecov
      #   uses: codecov/codecov-action@v3.1.4
      #   with:
      #     fail_ci_if_error: false
      #     files: coverage.xml
